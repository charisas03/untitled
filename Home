<!DOCTYPE html>
<!-- Use this for info ref: https://interactivepython.org/runestone/static/pythonds/Introduction/WhatIsComputerScience.html -->
<html>
  <head>
    <meta charset="utf-8">
    <title>
      Computer Science, Simplified
    </title>
  </head>
  <body>
    <h1>Welcome, Curious Wayfayer!</h1>
    <p>
      We're glad you've stumbled upon this site. You're probably here because you're curious about computer science,
      and have short of a million burning questions about it, right? Or maybe you have no idea where to begin and find computer science confusing, but want to know more about it.
      Well, you've come to the right place.
      We'll try our best to answer all of your questions in the most straight-forward way possible,
      while giving you a brief overview of the wonderful world of computer science!
      So are you ready? Let's begin!
    </p>
    <h2>What is Computer Science?</h2>
    <p>Intriguing? Yes. Innovative? Absolutely. Intimidating? It doesn't have to be!</p>
      <p>
        So what exactly is computer science? Despite what its name might suggest, computer science goes beyond the mere study of computers.
        Simply put, it is the study of problems, problem-solving, and the solutions that come out of the problem-solving process.
        These problems could range from finding your way around a new neighborhood to making a robot do your homework to creating a cure for cancer.
        Frankly, computers can work faster than us humans can, but in order for them to solve our problems, they need instructions.
        That's where computer scientists come into play.
      </p>
    </p>
    <h2>Okay, so what's a computer scientist? What do they do?</h2>
    <p>
    If computer science can be considered the study of problem-solving, then computer scientists are ultimately problem-solvers!
    They are the ones who give computers instructions to follow, in order to answer their questions.
    You can think of a computer scientist's job broken down into three simple steps:
    <h3>Asking a Question</h3>
      <p>
        Computer scientists ask questions to figure out where the problem is. For example,
        they might ask, "How can I sort all of my library books into different colors?"
        As we can see, the problem here is the unsorted library books.
      </p>
      <h3>Tweaking the Question</h3>
        <p>
          Computers are not as smart as we might imagine them to be.
          They can only work if we feed them the right information.
          To the computer, that information means nothing, which is why we have to be as accurate, logical, and precise as possible with our instructions for it.
          We might even have to tweak and simplify our question in order for the computer to execute our commands in a timely and efficient manner.
        </p>
      <h3>Getting the Question Answered</h3>
  <p>
    So here's the fun part! To have the computer answer our question and solve our problems (well, not all of them, if you know what I mean), we have to develop an algorithm.
    Algorithms are the actual set of instructions for the computer that show it exactly how to complete a task. You can think of it as a fancy to-do list, kind of like a recipe.
    The computer takes in inputs (like ingredients in a recipe) and produces an output (like a mean chocolate cake). 
    Each step of an algorithm logically flows to the next step. Let's go back to our example about our unsorted library books.
    Say that we decide that we want to sort the books alphabetically by title, as well as by color.
    A very messy algorithm could be to randomize all of the books and check after to see if they sorted according to our desired categories.
    We could try this process repeatedly, attempting again and again to sort our books through this method.
    OR we could try to develop a better algorithm to replace this slow and probably (and by probably, I mean extremely) ineffective method.
    We could create an algorithm that could find the first book that we need from the pile (a red book that begins with the letter A) 
    and from there, look for other red books that begin with the letter B.
    After that, it can see if we have any red books beginning with the letter C, and so on. Voila, you have a working algorithm on your hands! 
    It's the computer scientist's job to develop new algorithms to solve problems, or improve existing algorithms to become faster and more efficient.
    If you'd like to learn more about algorithms, head over <a href="">here</a>.
  </p>
  <h2>What are the fields within computer science?</h2>
  <p>
    Aha, so you're ready to explore the different subcategories of computer science? 
    There are many fields within the subject, but this site will cover the bulk of the most major ones. Take a look <a href="">here</a>
    to see a list of them and to figure out what you'd like to investigate next. Happy explorations!
  </p>
  </body>
</html>
